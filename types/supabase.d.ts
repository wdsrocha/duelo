/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/matches": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.matches.id"];
          createdAt?: parameters["rowFilter.matches.createdAt"];
          player1?: parameters["rowFilter.matches.player1"];
          player2?: parameters["rowFilter.matches.player2"];
          player1Guesses?: parameters["rowFilter.matches.player1Guesses"];
          player2Guesses?: parameters["rowFilter.matches.player2Guesses"];
          answer?: parameters["rowFilter.matches.answer"];
          startTime?: parameters["rowFilter.matches.startTime"];
          endTime?: parameters["rowFilter.matches.endTime"];
          winner?: parameters["rowFilter.matches.winner"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["matches"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** matches */
          matches?: definitions["matches"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.matches.id"];
          createdAt?: parameters["rowFilter.matches.createdAt"];
          player1?: parameters["rowFilter.matches.player1"];
          player2?: parameters["rowFilter.matches.player2"];
          player1Guesses?: parameters["rowFilter.matches.player1Guesses"];
          player2Guesses?: parameters["rowFilter.matches.player2Guesses"];
          answer?: parameters["rowFilter.matches.answer"];
          startTime?: parameters["rowFilter.matches.startTime"];
          endTime?: parameters["rowFilter.matches.endTime"];
          winner?: parameters["rowFilter.matches.winner"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.matches.id"];
          createdAt?: parameters["rowFilter.matches.createdAt"];
          player1?: parameters["rowFilter.matches.player1"];
          player2?: parameters["rowFilter.matches.player2"];
          player1Guesses?: parameters["rowFilter.matches.player1Guesses"];
          player2Guesses?: parameters["rowFilter.matches.player2Guesses"];
          answer?: parameters["rowFilter.matches.answer"];
          startTime?: parameters["rowFilter.matches.startTime"];
          endTime?: parameters["rowFilter.matches.endTime"];
          winner?: parameters["rowFilter.matches.winner"];
        };
        body: {
          /** matches */
          matches?: definitions["matches"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/role_permissions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.role_permissions.id"];
          role?: parameters["rowFilter.role_permissions.role"];
          permission?: parameters["rowFilter.role_permissions.permission"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["role_permissions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** role_permissions */
          role_permissions?: definitions["role_permissions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.role_permissions.id"];
          role?: parameters["rowFilter.role_permissions.role"];
          permission?: parameters["rowFilter.role_permissions.permission"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.role_permissions.id"];
          role?: parameters["rowFilter.role_permissions.role"];
          permission?: parameters["rowFilter.role_permissions.permission"];
        };
        body: {
          /** role_permissions */
          role_permissions?: definitions["role_permissions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/user_roles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_roles.id"];
          user_id?: parameters["rowFilter.user_roles.user_id"];
          role?: parameters["rowFilter.user_roles.role"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["user_roles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** user_roles */
          user_roles?: definitions["user_roles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_roles.id"];
          user_id?: parameters["rowFilter.user_roles.user_id"];
          role?: parameters["rowFilter.user_roles.role"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_roles.id"];
          user_id?: parameters["rowFilter.user_roles.user_id"];
          role?: parameters["rowFilter.user_roles.role"];
        };
        body: {
          /** user_roles */
          user_roles?: definitions["user_roles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          /** References the internal Supabase Auth user. */
          id?: parameters["rowFilter.users.id"];
          username?: parameters["rowFilter.users.username"];
          status?: parameters["rowFilter.users.status"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          /** References the internal Supabase Auth user. */
          id?: parameters["rowFilter.users.id"];
          username?: parameters["rowFilter.users.username"];
          status?: parameters["rowFilter.users.status"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          /** References the internal Supabase Auth user. */
          id?: parameters["rowFilter.users.id"];
          username?: parameters["rowFilter.users.username"];
          status?: parameters["rowFilter.users.status"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/handle_new_user": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/authorize": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: public.app_permission */
            requested_permission: string;
            /** Format: uuid */
            user_id: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  matches: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    createdAt: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    player1: string;
    /** Format: uuid */
    player2?: string;
    /** Format: ARRAY */
    player1Guesses?: string[];
    /** Format: ARRAY */
    player2Guesses?: string[];
    /** Format: text */
    answer: string;
    /** Format: timestamp without time zone */
    startTime?: string;
    /** Format: timestamp without time zone */
    endTime?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    winner?: string;
  };
  /** @description Application permissions for each role. */
  role_permissions: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: public.app_role
     * @enum {string}
     */
    role: "admin" | "moderator";
    /**
     * Format: public.app_permission
     * @enum {string}
     */
    permission: "channels.delete" | "messages.delete";
  };
  /** @description Application roles for each user. */
  user_roles: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    user_id: string;
    /**
     * Format: public.app_role
     * @enum {string}
     */
    role: "admin" | "moderator";
  };
  /** @description Profile data for each user. */
  users: {
    /**
     * Format: uuid
     * @description References the internal Supabase Auth user.
     *
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: text */
    username?: string;
    /**
     * Format: public.user_status
     * @default OFFLINE
     * @enum {string}
     */
    status?: "ONLINE" | "OFFLINE";
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description matches */
  "body.matches": definitions["matches"];
  /** Format: uuid */
  "rowFilter.matches.id": string;
  /** Format: timestamp without time zone */
  "rowFilter.matches.createdAt": string;
  /** Format: uuid */
  "rowFilter.matches.player1": string;
  /** Format: uuid */
  "rowFilter.matches.player2": string;
  /** Format: ARRAY */
  "rowFilter.matches.player1Guesses": string;
  /** Format: ARRAY */
  "rowFilter.matches.player2Guesses": string;
  /** Format: text */
  "rowFilter.matches.answer": string;
  /** Format: timestamp without time zone */
  "rowFilter.matches.startTime": string;
  /** Format: timestamp without time zone */
  "rowFilter.matches.endTime": string;
  /** Format: uuid */
  "rowFilter.matches.winner": string;
  /** @description role_permissions */
  "body.role_permissions": definitions["role_permissions"];
  /** Format: bigint */
  "rowFilter.role_permissions.id": string;
  /** Format: public.app_role */
  "rowFilter.role_permissions.role": string;
  /** Format: public.app_permission */
  "rowFilter.role_permissions.permission": string;
  /** @description user_roles */
  "body.user_roles": definitions["user_roles"];
  /** Format: bigint */
  "rowFilter.user_roles.id": string;
  /** Format: uuid */
  "rowFilter.user_roles.user_id": string;
  /** Format: public.app_role */
  "rowFilter.user_roles.role": string;
  /** @description users */
  "body.users": definitions["users"];
  /**
   * Format: uuid
   * @description References the internal Supabase Auth user.
   */
  "rowFilter.users.id": string;
  /** Format: text */
  "rowFilter.users.username": string;
  /** Format: public.user_status */
  "rowFilter.users.status": string;
}

export interface operations {}

export interface external {}
